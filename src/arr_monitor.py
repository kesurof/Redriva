#!/usr/bin/env python3
"""
Arr Monitor - Module de surveillance Sonarr/Radarr int√©gr√© √† Redriva
D√©tecte et corrige automatiquement les t√©l√©chargements √©chou√©s ou bloqu√©s
Adapt√© pour utiliser la configuration et les logs centralis√©s de Redriva
"""

import requests
import threading
import time
import platform
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta

# Import du gestionnaire de configuration Redriva
from config_manager import ConfigManager

logger = logging.getLogger(__name__)

class ArrMonitor:
    """
    Classe de surveillance Sonarr/Radarr int√©gr√©e √† Redriva
    Utilise la configuration centralis√©e et le syst√®me de logs de Redriva
    """
    
    def __init__(self, config_manager: ConfigManager):
        """
        Initialise le moniteur avec la configuration Redriva
        
        Args:
            config_manager: Instance du gestionnaire de configuration Redriva
        """
        self.config_manager = config_manager
        self.session = requests.Session()
        self.version = "2.0.0"  # Version int√©gr√©e Redriva
        self._setup_session()
        
        # √âtat du moniteur
        self.is_running = False
        self.monitor_thread = None
        
        logger.info("üîß Arr Monitor initialis√© pour Redriva")
    
    def _setup_session(self):
        """Configure la session HTTP avec optimisations"""
        # Timeout adaptatif selon l'architecture
        if platform.machine() in ['aarch64', 'arm64']:
            self.session.timeout = 15
            logger.info("üîß Optimisations ARM64 activ√©es")
        else:
            self.session.timeout = 10
        
        # Headers optimis√©s
        self.session.headers.update({
            'User-Agent': f'Redriva-ArrMonitor/{self.version} ({platform.machine()}; {platform.system()})'
        })
    
    def get_sonarr_config(self) -> Optional[Dict[str, Any]]:
        """R√©cup√®re la configuration Sonarr depuis Redriva"""
        config = self.config_manager.config
        sonarr_config = config.get('sonarr', {})
        
        if not sonarr_config.get('enabled', False):
            return None
            
        if not sonarr_config.get('url') or not sonarr_config.get('api_key'):
            logger.warning("‚ö†Ô∏è Configuration Sonarr incompl√®te")
            return None
            
        return sonarr_config
    
    def get_radarr_config(self) -> Optional[Dict[str, Any]]:
        """R√©cup√®re la configuration Radarr depuis Redriva"""
        config = self.config_manager.config
        radarr_config = config.get('radarr', {})
        
        if not radarr_config.get('enabled', False):
            return None
            
        if not radarr_config.get('url') or not radarr_config.get('api_key'):
            logger.warning("‚ö†Ô∏è Configuration Radarr incompl√®te")
            return None
            
        return radarr_config
    
    def test_connection(self, app_name: str, url: str, api_key: str) -> bool:
        """Test la connexion √† l'API d'une application"""
        try:
            response = self.session.get(
                f"{url}/api/v3/system/status",
                headers={'X-Api-Key': api_key}
            )
            
            if response.status_code == 200:
                logger.info(f"‚úÖ {app_name} connexion r√©ussie")
                return True
            else:
                logger.error(f"‚ùå {app_name} erreur connexion: {response.status_code}")
                return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå {app_name} exception connexion: {e}")
            return False
    
    def get_queue(self, app_name: str, url: str, api_key: str) -> List[Dict[str, Any]]:
        """R√©cup√®re la queue des t√©l√©chargements avec pagination compl√®te"""
        try:
            all_items = []
            page = 1
            page_size = 250
            
            while True:
                response = self.session.get(
                    f"{url}/api/v3/queue",
                    headers={'X-Api-Key': api_key},
                    params={
                        'page': page,
                        'pageSize': page_size,
                        'includeUnknownSeriesItems': 'true' if app_name.lower() == 'sonarr' else None
                    }
                )
                
                if response.status_code != 200:
                    logger.error(f"‚ùå {app_name} erreur r√©cup√©ration queue: {response.status_code}")
                    break
                
                data = response.json()
                records = data.get('records', [])
                
                if not records:
                    break
                
                all_items.extend(records)
                
                # V√©rifier s'il y a d'autres pages
                if len(records) < page_size:
                    break
                
                page += 1
            
            logger.debug(f"üìã {app_name} queue r√©cup√©r√©e: {len(all_items)} √©l√©ments")
            return all_items
            
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå {app_name} exception r√©cup√©ration queue: {e}")
            return []
    
    def get_history(self, app_name: str, url: str, api_key: str, since_hours: int = 24) -> List[Dict[str, Any]]:
        """R√©cup√®re l'historique des t√©l√©chargements"""
        try:
            since_date = datetime.now() - timedelta(hours=since_hours)
            
            response = self.session.get(
                f"{url}/api/v3/history",
                headers={'X-Api-Key': api_key},
                params={
                    'page': 1,
                    'pageSize': 100,
                    'since': since_date.isoformat()
                }
            )
            
            if response.status_code == 200:
                data = response.json()
                return data.get('records', [])
            else:
                logger.error(f"‚ùå {app_name} erreur r√©cup√©ration historique: {response.status_code}")
                return []
                
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå {app_name} exception r√©cup√©ration historique: {e}")
            return []
    
    def blocklist_and_search(self, app_name: str, url: str, api_key: str, download_id: int) -> bool:
        """Bloque la release d√©faillante et lance une nouvelle recherche"""
        try:
            # Bloquer la release
            blocklist_response = self.session.put(
                f"{url}/api/v3/queue/blocklist",
                headers={'X-Api-Key': api_key},
                json={'ids': [download_id]}
            )
            
            if blocklist_response.status_code not in [200, 204]:
                logger.error(f"‚ùå {app_name} erreur blocklist: {blocklist_response.status_code}")
                return False
            
            # Supprimer de la queue
            delete_response = self.session.delete(
                f"{url}/api/v3/queue/{download_id}",
                headers={'X-Api-Key': api_key},
                params={'removeFromClient': 'true', 'blocklist': 'false'}
            )
            
            if delete_response.status_code not in [200, 204]:
                logger.warning(f"‚ö†Ô∏è {app_name} erreur suppression queue: {delete_response.status_code}")
            
            logger.info(f"‚úÖ {app_name} release bloqu√©e et supprim√©e: ID {download_id}")
            return True
            
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå {app_name} exception blocklist: {e}")
            return False
    
    def trigger_missing_search(self, app_name: str, url: str, api_key: str) -> bool:
        """Lance une recherche pour les √©l√©ments manqu√©s"""
        try:
            endpoint = "wantedmissing" if app_name.lower() == "sonarr" else "wanted/missing"
            
            response = self.session.post(
                f"{url}/api/v3/command",
                headers={'X-Api-Key': api_key},
                json={'name': 'MissingEpisodeSearch' if app_name.lower() == 'sonarr' else 'MissingMovieSearch'}
            )
            
            if response.status_code in [200, 201]:
                logger.info(f"‚úÖ {app_name} recherche manqu√©s lanc√©e")
                return True
            else:
                logger.error(f"‚ùå {app_name} erreur recherche manqu√©s: {response.status_code}")
                return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå {app_name} exception recherche manqu√©s: {e}")
            return False
    
    def remove_download(self, app_name: str, url: str, api_key: str, download_id: int) -> bool:
        """Supprime un t√©l√©chargement de la queue"""
        try:
            response = self.session.delete(
                f"{url}/api/v3/queue/{download_id}",
                headers={'X-Api-Key': api_key},
                params={'removeFromClient': 'true', 'blocklist': 'false'}
            )
            
            if response.status_code in [200, 204]:
                logger.info(f"‚úÖ {app_name} t√©l√©chargement supprim√©: ID {download_id}")
                return True
            else:
                logger.error(f"‚ùå {app_name} erreur suppression: {response.status_code}")
                return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå {app_name} exception suppression: {e}")
            return False
    
    def is_download_failed(self, item: Dict[str, Any]) -> bool:
        """V√©rifie si un t√©l√©chargement a une erreur sp√©cifique qBittorrent"""
        error_message = item.get('errorMessage', '')
        
        # D√©tection stricte : seulement l'erreur qBittorrent sp√©cifique
        is_qbittorrent_error = (
            error_message and "qBittorrent is reporting an error" in error_message
        )
        
        if is_qbittorrent_error:
            logger.debug(f"üö® Erreur qBittorrent d√©tect√©e: {item.get('title', 'Inconnu')}")
        
        return is_qbittorrent_error
    
    def process_application(self, app_name: str, app_config: Dict[str, Any]) -> int:
        """
        Traite une application (Sonarr ou Radarr)
        
        Returns:
            int: Nombre d'√©l√©ments trait√©s
        """
        url = app_config.get('url')
        api_key = app_config.get('api_key')
        
        logger.info(f"üîç Analyse de {app_name}...")
        
        # Test de connexion
        if not self.test_connection(app_name, url, api_key):
            return 0
        
        # R√©cup√©ration de la queue
        queue = self.get_queue(app_name, url, api_key)
        if not queue:
            logger.info(f"üìã {app_name} queue vide")
            return 0
        
        logger.info(f"üìã {app_name} {len(queue)} √©l√©ments en queue")
        
        # Statistiques des statuts pour diagnostic
        status_count = {}
        for item in queue:
            status = item.get('status', 'unknown')
            status_count[status] = status_count.get(status, 0) + 1
        
        logger.debug(f"üìä {app_name} Statuts: {dict(sorted(status_count.items()))}")
        
        processed_items = 0
        
        for item in queue:
            if self.is_download_failed(item):
                download_id = item.get('id')
                title = item.get('title', 'Inconnu')
                
                logger.warning(f"üö® {app_name} erreur d√©tect√©e: {title}")
                
                # Bloquer et relancer la recherche
                if self.blocklist_and_search(app_name, url, api_key, download_id):
                    processed_items += 1
                    logger.info(f"‚úÖ {app_name} correction appliqu√©e: {title}")
        
        if processed_items > 0:
            logger.info(f"üîß {app_name} {processed_items} √©l√©ments corrig√©s")
            # Lancer une recherche pour les manqu√©s apr√®s corrections
            self.trigger_missing_search(app_name, url, api_key)
        else:
            logger.info(f"‚úÖ {app_name} aucune erreur d√©tect√©e")
        
        return processed_items
    
    def run_cycle(self) -> Dict[str, int]:
        """
        Ex√©cute un cycle complet de surveillance
        
        Returns:
            Dict[str, int]: Statistiques du cycle (app_name -> nb_corrections)
        """
        logger.info("üöÄ D√©but du cycle de surveillance Arr")
        
        results = {}
        
        # Traitement Sonarr
        sonarr_config = self.get_sonarr_config()
        if sonarr_config:
            try:
                results['sonarr'] = self.process_application('Sonarr', sonarr_config)
            except Exception as e:
                logger.error(f"‚ùå Erreur traitement Sonarr: {e}")
                results['sonarr'] = 0
        
        # Traitement Radarr
        radarr_config = self.get_radarr_config()
        if radarr_config:
            try:
                results['radarr'] = self.process_application('Radarr', radarr_config)
            except Exception as e:
                logger.error(f"‚ùå Erreur traitement Radarr: {e}")
                results['radarr'] = 0
        
        total_corrections = sum(results.values())
        logger.info(f"‚úÖ Cycle termin√© - {total_corrections} corrections appliqu√©es")
        
        return results
    
    def start_monitoring(self, interval: int = 300) -> bool:
        """
        D√©marre la surveillance continue en arri√®re-plan
        
        Args:
            interval: Intervalle en secondes entre les cycles
            
        Returns:
            bool: True si d√©marr√© avec succ√®s
        """
        if self.is_running:
            logger.warning("‚ö†Ô∏è Surveillance Arr d√©j√† en cours")
            return False
        
        def monitor_loop():
            """Boucle de surveillance"""
            logger.info(f"üîÑ Surveillance Arr d√©marr√©e (intervalle: {interval}s)")
            
            while self.is_running:
                try:
                    self.run_cycle()
                    
                    # Attente avec v√©rification d'arr√™t
                    for _ in range(interval):
                        if not self.is_running:
                            break
                        time.sleep(1)
                        
                except Exception as e:
                    logger.error(f"‚ùå Erreur cycle surveillance: {e}")
                    time.sleep(30)  # Attente plus courte en cas d'erreur
            
            logger.info("üõë Surveillance Arr arr√™t√©e")
        
        self.is_running = True
        self.monitor_thread = threading.Thread(target=monitor_loop, daemon=True)
        self.monitor_thread.start()
        
        return True
    
    def stop_monitoring(self) -> bool:
        """
        Arr√™te la surveillance continue
        
        Returns:
            bool: True si arr√™t√© avec succ√®s
        """
        if not self.is_running:
            logger.warning("‚ö†Ô∏è Surveillance Arr d√©j√† arr√™t√©e")
            return False
        
        logger.info("üõë Arr√™t surveillance Arr...")
        self.is_running = False
        
        if self.monitor_thread and self.monitor_thread.is_alive():
            self.monitor_thread.join(timeout=5)
        
        return True
    
    def get_status(self) -> Dict[str, Any]:
        """
        Retourne le statut actuel du moniteur
        
        Returns:
            Dict contenant les informations de statut
        """
        return {
            'running': self.is_running,
            'sonarr_enabled': self.get_sonarr_config() is not None,
            'radarr_enabled': self.get_radarr_config() is not None,
            'version': self.version
        }
    
    def diagnose_queue(self, app_name: str) -> Dict[str, Any]:
        """
        Mode diagnostic pour analyser la queue en d√©tail
        
        Args:
            app_name: 'sonarr' ou 'radarr'
            
        Returns:
            Dict contenant les statistiques d√©taill√©es
        """
        if app_name.lower() == 'sonarr':
            app_config = self.get_sonarr_config()
            display_name = 'Sonarr'
        elif app_name.lower() == 'radarr':
            app_config = self.get_radarr_config()
            display_name = 'Radarr'
        else:
            return {'error': 'Application non support√©e'}
        
        if not app_config:
            return {'error': f'{display_name} non configur√© ou d√©sactiv√©'}
        
        url = app_config.get('url')
        api_key = app_config.get('api_key')
        
        logger.info(f"üî¨ DIAGNOSTIC {display_name}...")
        
        # Test de connexion
        if not self.test_connection(display_name, url, api_key):
            return {'error': f'Connexion {display_name} √©chou√©e'}
        
        # R√©cup√©ration de la queue
        queue = self.get_queue(display_name, url, api_key)
        if not queue:
            return {
                'total_items': 0,
                'status_breakdown': {},
                'error_items': [],
                'errors_detected': 0
            }
        
        # Analyse des statuts
        status_count = {}
        error_items = []
        
        for item in queue:
            status = item.get('status', 'unknown')
            status_count[status] = status_count.get(status, 0) + 1
            
            if self.is_download_failed(item):
                error_items.append({
                    'id': item.get('id'),
                    'title': item.get('title', 'Inconnu'),
                    'status': status,
                    'errorMessage': item.get('errorMessage', '')
                })
        
        result = {
            'total_items': len(queue),
            'status_breakdown': status_count,
            'error_items': error_items,
            'errors_detected': len(error_items)
        }
        
        logger.info(f"üìä {display_name} DIAGNOSTIC: {len(queue)} √©l√©ments, {len(error_items)} erreurs")
        
        return result


# Instance globale pour l'int√©gration dans Redriva
_arr_monitor_instance = None

def get_arr_monitor(config_manager: ConfigManager = None) -> ArrMonitor:
    """
    R√©cup√®re l'instance singleton du moniteur Arr
    
    Args:
        config_manager: Instance du gestionnaire de configuration Redriva
        
    Returns:
        ArrMonitor: Instance du moniteur
    """
    global _arr_monitor_instance
    
    if _arr_monitor_instance is None:
        if config_manager is None:
            config_manager = ConfigManager()
        _arr_monitor_instance = ArrMonitor(config_manager)
    
    return _arr_monitor_instance
