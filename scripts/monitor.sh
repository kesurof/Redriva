#!/bin/bash
# üîç Script de Monitoring Redriva en Temps R√©el
# Usage: ./monitor.sh [container_name]

CONTAINER=${1:-redriva}

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# V√©rifier que le conteneur existe
if ! docker ps -a --format "table {{.Names}}" | grep -q "^${CONTAINER}$"; then
    echo -e "${RED}‚ùå Conteneur '$CONTAINER' non trouv√©${NC}"
    exit 1
fi

# Fonction pour afficher avec timestamp
log_with_time() {
    local color="$1"
    local icon="$2" 
    local message="$3"
    echo -e "${color}${icon} $(date '+%H:%M:%S') - ${message}${NC}"
}

echo -e "${BLUE}üîç Monitoring Redriva en temps r√©el...${NC}"
echo -e "${BLUE}Container: $CONTAINER${NC}"
echo -e "${BLUE}Appuyez sur Ctrl+C pour arr√™ter${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# Trap pour g√©rer Ctrl+C proprement
trap 'echo -e "\n${BLUE}üëã Arr√™t du monitoring...${NC}"; exit 0' INT

# Monitoring en temps r√©el
docker logs -f "$CONTAINER" 2>/dev/null | while IFS= read -r line; do
    # Synchronisations
    if echo "$line" | grep -q '^\[SYNC_START'; then
        MODE=$(echo "$line" | grep -o 'mode=[a-z_]*' | cut -d= -f2)
        log_with_time "$BLUE" "üöÄ" "SYNC D√âMARR√âE ($MODE)"
        
    elif echo "$line" | grep -q '^\[SYNC_END.*status=success'; then
        MODE=$(echo "$line" | grep -o 'mode=[a-z_]*' | cut -d= -f2)
        DURATION=$(echo "$line" | grep -o 'duration=[0-9.]*' | cut -d= -f2)
        TORRENTS=$(echo "$line" | grep -o 'torrents=[0-9]*' | cut -d= -f2)
        RATE=$(echo "$line" | grep -o 'rate=[0-9.]*' | cut -d= -f2)
        
        DETAILS="Mode: $MODE"
        [ -n "$DURATION" ] && DETAILS="$DETAILS | Dur√©e: ${DURATION}s"
        [ -n "$TORRENTS" ] && DETAILS="$DETAILS | Torrents: $TORRENTS"
        [ -n "$RATE" ] && DETAILS="$DETAILS | Vitesse: ${RATE}/s"
        
        log_with_time "$GREEN" "‚úÖ" "SYNC R√âUSSIE ($DETAILS)"
        
    elif echo "$line" | grep -q '^\[SYNC_ABORT'; then
        log_with_time "$YELLOW" "‚ö†Ô∏è" "SYNC ANNUL√âE"
        
    # Phases de sync smart
    elif echo "$line" | grep -q '^\[SYNC_PHASE_START'; then
        PHASE=$(echo "$line" | grep -o 'phase=[0-9]*' | cut -d= -f2)
        DESC=$(echo "$line" | grep -o 'description="[^"]*"' | cut -d'"' -f2)
        log_with_time "$CYAN" "üìã" "Phase $PHASE: $DESC"
        
    elif echo "$line" | grep -q '^\[SYNC_PHASE_END'; then
        PHASE=$(echo "$line" | grep -o 'phase=[0-9]*' | cut -d= -f2)
        DURATION=$(echo "$line" | grep -o 'duration=[0-9.]*' | cut -d= -f2)
        log_with_time "$CYAN" "üìã" "Phase $PHASE termin√©e (${DURATION}s)"
        
    # Health checks
    elif echo "$line" | grep -q '^\[HEALTH_CHECK_START'; then
        log_with_time "$PURPLE" "üè•" "HEALTH CHECK D√âMARR√â"
        
    elif echo "$line" | grep -q '^\[HEALTH_CHECK_END'; then
        CHECKED=$(echo "$line" | grep -o 'checked=[0-9]*' | cut -d= -f2)
        ERRORS=$(echo "$line" | grep -o 'errors=[0-9]*' | cut -d= -f2)
        DURATION=$(echo "$line" | grep -o 'duration=[0-9.]*' | cut -d= -f2)
        
        DETAILS=""
        [ -n "$CHECKED" ] && DETAILS="V√©rifi√©s: $CHECKED"
        [ -n "$ERRORS" ] && DETAILS="$DETAILS | Erreurs 503: $ERRORS"
        [ -n "$DURATION" ] && DETAILS="$DETAILS | Dur√©e: ${DURATION}s"
        
        if [ "${ERRORS:-0}" -gt 0 ]; then
            log_with_time "$YELLOW" "üè•" "HEALTH CHECK ($DETAILS)"
        else
            log_with_time "$PURPLE" "üè•" "HEALTH CHECK ($DETAILS)"
        fi
        
    # Nettoyages
    elif echo "$line" | grep -q '^\[CLEAN_START'; then
        log_with_time "$BLUE" "üßπ" "NETTOYAGE D√âMARR√â"
        
    elif echo "$line" | grep -q '^\[CLEAN_END'; then
        DELETED=$(echo "$line" | grep -o 'deleted=[0-9]*' | cut -d= -f2)
        DURATION=$(echo "$line" | grep -o 'duration=[0-9.]*' | cut -d= -f2)
        
        DETAILS=""
        [ -n "$DELETED" ] && DETAILS="Supprim√©s: $DELETED"
        [ -n "$DURATION" ] && DETAILS="$DETAILS | Dur√©e: ${DURATION}s"
        
        log_with_time "$BLUE" "üßπ" "NETTOYAGE TERMIN√â ($DETAILS)"
        
    # Suppressions de torrents
    elif echo "$line" | grep -q '^\[TORRENT_DELETE_END.*status=success'; then
        TORRENT_ID=$(echo "$line" | grep -o 'torrent_id=[a-zA-Z0-9]*' | cut -d= -f2)
        log_with_time "$YELLOW" "üóëÔ∏è" "TORRENT SUPPRIM√â (ID: $TORRENT_ID)"
        
    # Batch suppressions  
    elif echo "$line" | grep -q '^\[BATCH_DELETE_START'; then
        COUNT=$(echo "$line" | grep -o 'count=[0-9]*' | cut -d= -f2)
        log_with_time "$YELLOW" "üóëÔ∏è" "SUPPRESSION EN LOT D√âMARR√âE ($COUNT torrents)"
        
    elif echo "$line" | grep -q '^\[BATCH_DELETE_PROGRESS'; then
        PROGRESS=$(echo "$line" | grep -o 'progress=[0-9]*' | cut -d= -f2)
        TOTAL=$(echo "$line" | grep -o 'total=[0-9]*' | cut -d= -f2)
        PERCENTAGE=$(echo "scale=1; $PROGRESS * 100 / $TOTAL" | bc 2>/dev/null || echo "?")
        log_with_time "$YELLOW" "‚è≥" "SUPPRESSION EN LOT: $PROGRESS/$TOTAL (${PERCENTAGE}%)"
        
    elif echo "$line" | grep -q '^\[BATCH_DELETE_END'; then
        DELETED=$(echo "$line" | grep -o 'deleted=[0-9]*' | cut -d= -f2)
        DURATION=$(echo "$line" | grep -o 'duration=[0-9.]*' | cut -d= -f2)
        log_with_time "$YELLOW" "üóëÔ∏è" "SUPPRESSION EN LOT TERMIN√âE ($DELETED supprim√©s en ${DURATION}s)"
        
    # Base de donn√©es
    elif echo "$line" | grep -q '^\[DB_CHECK_START'; then
        log_with_time "$CYAN" "üíæ" "V√âRIFICATION DB D√âMARR√âE"
        
    elif echo "$line" | grep -q '^\[DB_CHECK_END'; then
        log_with_time "$CYAN" "üíæ" "V√âRIFICATION DB TERMIN√âE"
        
    # T√¢ches async
    elif echo "$line" | grep -q '^\[ASYNC_TASK_START'; then
        TASK=$(echo "$line" | grep -o 'task="[^"]*"' | cut -d'"' -f2)
        log_with_time "$BLUE" "‚ö°" "T√ÇCHE ASYNC D√âMARR√âE ($TASK)"
        
    elif echo "$line" | grep -q '^\[ASYNC_TASK_END'; then
        TASK=$(echo "$line" | grep -o 'task="[^"]*"' | cut -d'"' -f2)
        STATUS=$(echo "$line" | grep -o 'status=[a-z]*' | cut -d= -f2)
        DURATION=$(echo "$line" | grep -o 'duration=[0-9.]*' | cut -d= -f2)
        
        if [ "$STATUS" = "success" ]; then
            log_with_time "$GREEN" "‚ö°" "T√ÇCHE ASYNC TERMIN√âE ($TASK - ${DURATION}s)"
        else
            log_with_time "$RED" "‚ö°" "T√ÇCHE ASYNC √âCHOU√âE ($TASK - ${DURATION}s)"
        fi
        
    # Erreurs g√©n√©rales
    elif echo "$line" | grep -q '^\[.*status=error'; then
        TYPE=$(echo "$line" | sed 's/^\[\([^_]*\)_.*/\1/')
        ERROR_MSG=$(echo "$line" | grep -o 'error="[^"]*"' | cut -d'"' -f2)
        
        DETAILS="Type: $TYPE"
        [ -n "$ERROR_MSG" ] && DETAILS="$DETAILS | Erreur: $ERROR_MSG"
        
        log_with_time "$RED" "‚ùå" "ERREUR ($DETAILS)"
        
    # Triggers depuis l'interface web
    elif echo "$line" | grep -q '^\[SYNC_TRIGGER'; then
        SOURCE=$(echo "$line" | grep -o 'source="[^"]*"' | cut -d'"' -f2)
        log_with_time "$BLUE" "üåê" "SYNC D√âCLENCH√âE (Web: $SOURCE)"
        
    elif echo "$line" | grep -q '^\[CLEAN_TRIGGER'; then
        log_with_time "$BLUE" "üåê" "NETTOYAGE D√âCLENCH√â (Web)"
        
    # Autres √©v√©nements importants
    elif echo "$line" | grep -q '^\[UNAVAILABLE_CLEAN'; then
        log_with_time "$BLUE" "üßπ" "NETTOYAGE FICHIERS INDISPONIBLES"
        
    elif echo "$line" | grep -q '^\[STATS_REFRESH'; then
        log_with_time "$CYAN" "üìä" "RAFRA√éCHISSEMENT STATISTIQUES"
    fi
done
