#!/usr/bin/env python3
"""
Script de test pour simuler des fichiers indisponibles
"""
import sqlite3
import sys
import os

# Ajouter le chemin du projet
sys.path.append('/home/kesurof/Projet_Gihtub/Redriva/src')

DB_PATH = '/home/kesurof/Projet_Gihtub/Redriva/data/redriva.db'

def diagnose_real_errors():
    """Diagnostique les vraies erreurs pr√©sentes dans la base"""
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        
        # V√©rifier toutes les erreurs existantes
        c.execute("""
            SELECT error, COUNT(*) as count 
            FROM torrent_details 
            WHERE error IS NOT NULL 
            GROUP BY error 
            ORDER BY count DESC
        """)
        errors = c.fetchall()
        
        print("üîç DIAGNOSTIC DES ERREURS R√âELLES:")
        if errors:
            for error, count in errors:
                print(f"   üìã {error}: {count} torrents")
        else:
            print("   ‚úÖ Aucune erreur trouv√©e dans la base")
        
        # V√©rifier les statuts
        c.execute("""
            SELECT status, COUNT(*) as count 
            FROM torrent_details 
            WHERE status IS NOT NULL 
            GROUP BY status 
            ORDER BY count DESC
        """)
        statuses = c.fetchall()
        
        print("\nüìä R√âPARTITION DES STATUTS:")
        for status, count in statuses:
            print(f"   üìå {status}: {count} torrents")

def test_unavailable_files():
    """Simule quelques fichiers indisponibles pour tester le syst√®me"""
    
    # D'abord diagnostiquer les erreurs r√©elles
    diagnose_real_errors()
    
    # Connexion √† la base de donn√©es
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        
        # V√©rifier les torrents existants
        c.execute("SELECT id, name FROM torrent_details LIMIT 2")
        torrents = c.fetchall()
        
        if not torrents:
            print("‚ùå Aucun torrent trouv√© dans la base pour les tests")
            return
        
        # Simuler des erreurs avec des formats qui matchent les crit√®res de recherche
        test_errors = [
            ('rd_error_24_unavailable_file', 'Real-Debrid API error: unavailable_file (code 24)'),
            ('rd_error_503_service_unavailable', 'Real-Debrid API error: service unavailable (code 503)')
        ]
        
        for i, (torrent_id, name) in enumerate(torrents):
            if i < len(test_errors):
                error_code, error_msg = test_errors[i]
                
                c.execute("""
                    UPDATE torrent_details 
                    SET error = ?, status = 'error' 
                    WHERE id = ?
                """, (error_msg, torrent_id))
                
                print(f"‚úÖ Simul√© erreur {error_code} pour torrent: {name}")
        
        conn.commit()
        print(f"üéØ Test configur√©: {len(test_errors)} fichiers marqu√©s comme indisponibles")

def reset_test():
    """R√©initialise les erreurs de test"""
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        
        c.execute("""
            UPDATE torrent_details 
            SET error = NULL, status = 'downloaded' 
            WHERE error LIKE '%Real-Debrid API error:%' OR error LIKE '%rd_error_%'
        """)
        
        changed = c.rowcount
        conn.commit()
        print(f"üîÑ R√©initialis√©: {changed} torrents nettoy√©s")

def inject_real_rd_error():
    """Injecte une vraie erreur au format Real-Debrid API"""
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        
        # Prendre le premier torrent disponible
        c.execute("SELECT id, name FROM torrent_details WHERE status = 'downloaded' LIMIT 1")
        torrent = c.fetchone()
        
        if not torrent:
            print("‚ùå Aucun torrent disponible pour injection d'erreur")
            return
        
        torrent_id, name = torrent
        
        # Injecter une erreur au format Real-Debrid exact
        real_error = "rd_error_24_unavailable_file"
        
        c.execute("""
            UPDATE torrent_details 
            SET error = ?, status = 'error' 
            WHERE id = ?
        """, (real_error, torrent_id))
        
        conn.commit()
        print(f"‚úÖ Inject√© erreur Real-Debrid sur: {name}")
        print(f"   Format: {real_error}")
        
        return torrent_id

if __name__ == "__main__":
    if len(sys.argv) > 1:
        action = sys.argv[1]
        if action == 'reset':
            reset_test()
        elif action == 'diagnose':
            diagnose_real_errors()
        elif action == 'inject':
            inject_real_rd_error()
        else:
            print("‚ùå Action inconnue. Utilisez: diagnose, inject, reset, ou aucun argument pour le test")
    else:
        test_unavailable_files()
        print("\nüìã Pour tester:")
        print("1. Allez sur http://127.0.0.1:5000")
        print("2. V√©rifiez la carte 'Fichiers indisponibles' sur le dashboard")
        print("3. Cliquez sur 'G√©rer les indisponibles' pour voir les torrents filtr√©s")
        print("4. Testez le bouton 'V√©rifier sant√© fichiers' dans l'onglet Actions")
        print("5. Testez le bouton 'Nettoyer indisponibles' dans l'onglet Actions")
        print("\nÔøΩ Commandes disponibles:")
        print("  python test_unavailable.py diagnose  # Voir les vraies erreurs")
        print("  python test_unavailable.py inject    # Injecter une vraie erreur RD")
        print("  python test_unavailable.py reset     # Nettoyer les erreurs de test")
