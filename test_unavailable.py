#!/usr/bin/env python3
"""
Script de test pour simuler des fichiers indisponibles
"""
import sqlite3
import sys
import os

# Ajouter le chemin du projet
sys.path.append('/home/kesurof/Projet_Gihtub/Redriva/src')

DB_PATH = '/home/kesurof/Projet_Gihtub/Redriva/data/redriva.db'

def test_unavailable_files():
    """Simule quelques fichiers indisponibles pour tester le syst√®me"""
    
    # Connexion √† la base de donn√©es
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        
        # V√©rifier les torrents existants
        c.execute("SELECT id, name FROM torrent_details LIMIT 2")
        torrents = c.fetchall()
        
        if not torrents:
            print("‚ùå Aucun torrent trouv√© dans la base pour les tests")
            return
        
        # Simuler des erreurs sur les 2 premiers torrents
        test_errors = [
            ('503_service_unavailable', 'Simulated 503 error for testing'),
            ('404_file_not_found', 'Simulated 404 error for testing')
        ]
        
        for i, (torrent_id, name) in enumerate(torrents):
            if i < len(test_errors):
                error_code, error_msg = test_errors[i]
                
                c.execute("""
                    UPDATE torrent_details 
                    SET error = ?, status = 'error' 
                    WHERE id = ?
                """, (error_msg, torrent_id))
                
                print(f"‚úÖ Simul√© erreur {error_code} pour torrent: {name}")
        
        conn.commit()
        print(f"üéØ Test configur√©: {len(test_errors)} fichiers marqu√©s comme indisponibles")

def reset_test():
    """R√©initialise les erreurs de test"""
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        
        c.execute("""
            UPDATE torrent_details 
            SET error = NULL, status = 'downloaded' 
            WHERE error LIKE '%Simulated%'
        """)
        
        changed = c.rowcount
        conn.commit()
        print(f"üîÑ R√©initialis√©: {changed} torrents nettoy√©s")

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == 'reset':
        reset_test()
    else:
        test_unavailable_files()
        print("\nüìã Pour tester:")
        print("1. Allez sur http://127.0.0.1:5000")
        print("2. V√©rifiez la carte 'Fichiers indisponibles' sur le dashboard")
        print("3. Cliquez sur 'G√©rer les indisponibles' pour voir les torrents filtr√©s")
        print("4. Testez le bouton 'V√©rifier sant√© fichiers' dans l'onglet Actions")
        print("5. Testez le bouton 'Nettoyer indisponibles' dans l'onglet Actions")
        print("\nüîÑ Pour r√©initialiser: python test_unavailable.py reset")
