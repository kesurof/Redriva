name: Build and Push Docker Image Multi-Architecture

on:
  push:
    branches: [ main, alpha, ssdv2 ]
  pull_request:
    branches: [ main, alpha, ssdv2 ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Normaliser le nom de l'image en minuscules
      - name: Set lowercase image name
        id: image
        run: |
          echo "name=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=alpha,enable=${{ github.ref == 'refs/heads/alpha' }}
            type=raw,value=ssdv2,enable=${{ github.ref == 'refs/heads/ssdv2' }}
            type=ref,event=branch
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=Redriva
            org.opencontainers.image.description=Interface web pour Real-Debrid
            org.opencontainers.image.vendor=Kesurof

      - name: Build and push multi-architecture
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ github.sha }}

      - name: Generate artifact attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  test-multiarch:
    needs: build
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    runs-on: ubuntu-latest
    steps:
    # Normaliser le nom de l'image en minuscules pour les tests
    - name: Set lowercase image name
      id: image
      run: |
        echo "name=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Test image on ${{ matrix.platform }}
      run: |
        echo "üß™ Test de l'image sur ${{ matrix.platform }}"
        docker run --rm --platform ${{ matrix.platform }} \
          ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:latest \
          python -c "import sys; print(f'‚úÖ Python {sys.version} sur ${{ matrix.platform }}')" || \
        echo "‚ö†Ô∏è Test √©chou√© pour ${{ matrix.platform }}"